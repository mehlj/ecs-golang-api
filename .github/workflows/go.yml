name: 'Test, build, and deploy golang API in ECS'

on:
  push:
    branches:
    - master
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  # test:
  #   name: Test golang API
  #   runs-on: ubuntu-22.04

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-go@v3
  #     with:
  #       go-version: '1.20'

  #   # - name: Grab go dependencies
  #   #   run: go get -u github.com/gorilla/mux github.com/mattn/go-sqlite3
    
  #   - name: Run unit tests
  #     run: go test -v api/main_test.go api/main.go api/sql.go
    
  #   # - name: Lint Dockerfile
  #   #   run: hadolint Dockerfile


  create_repo:
    name: Deploy ECR repository
    runs-on: ubuntu-22.04
    # needs: test
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      REPOSITORY_URL: ${{ steps.get_repo_url.outputs.REPOSITORY_URL }}

    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        mask-aws-account-id: 'no' # https://github.com/orgs/community/discussions/26636

    - run: terraform init
    - run: terraform fmt -check
    - run: terraform apply -target aws_ecr_repository.ecr -target aws_iam_policy_document.ecrpolicy -target aws_ecr_repository_policy.ecrpolicy -auto-approve

    - id: get_repo_url
      run: echo "REPOSITORY_URL=$(terraform output -raw repository_url)" >> "$GITHUB_OUTPUT"

  create_database:
    name: Deploy RDS database
    runs-on: ubuntu-22.04
    needs: create_repo
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        mask-aws-account-id: 'no' # https://github.com/orgs/community/discussions/26636

    - run: terraform init
    - run: terraform fmt -check
    - run: terraform apply -target aws_security_group.rds -target aws_db_subnet_group.mehlj-pipeline -target aws_db_parameter_group.mehlj-pipeline -target aws_db_instance.mehlj-pipeline -auto-approve


  build:
    name: Build and push image to ECR
    runs-on: ubuntu-22.04
    needs: [create_repo, create_database]

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        mask-aws-account-id: 'no' # https://github.com/orgs/community/discussions/26636

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      env:
        ECR_REPOSITORY: ${{needs.create_repo.outputs.REPOSITORY_URL}}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest


  deploy:
    name: Deploy ECR image to ECS cluster
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./terraform
    needs: build
    outputs:
      ALB_URL: ${{ steps.get_alb_url.outputs.ALB_URL }}

    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false


    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        mask-aws-account-id: 'no' # https://github.com/orgs/community/discussions/26636

    - name: Read database secrets from AWS Secrets Manager into environment variables
      uses: abhilash1in/aws-secrets-manager-action@v2.1.0
      with:
        secrets: mehlj_lab_creds
        parse-json: true

    - run: terraform init

    - name: Build Postgres DSN string
      run: echo TF_VAR_pg_dsn="postgres://$(terraform output -raw rds_username):${MEHLJ_LAB_CREDS_VAULT}@$(terraform output -raw rds_hostname):5432/ecspoc" >> $GITHUB_ENV

    - run: echo TF_VAR_image_tag="$GITHUB_SHA" >> $GITHUB_ENV
    - run: terraform fmt -check
    - run: terraform apply -auto-approve

    - id: get_alb_url
      run: echo "ALB_URL=$(terraform output -raw alb_domain_name)" >> "$GITHUB_OUTPUT"


  validate:
    name: Ensure app is responding publicly
    runs-on: ubuntu-22.04
    needs: deploy

    steps:
      - name: cURL for 5 minutes until errors out
        env:
          ALB_URL: ${{needs.deploy.outputs.ALB_URL}}
        run: curl --head -X GET -v --retry 20 --retry-all-errors --retry-max-time 300 $ALB_URL 